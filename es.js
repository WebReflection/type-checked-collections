const e=()=>!0,n=e=>{throw new TypeError(e)},t=(n,t)=>{const s=[];if(n)for(const e of n.split(/\s*\|\s*/))"object"===e?s.push((n=>null!==n&&typeof n===e)):"null"===e?s.push((e=>null===e)):s.push((n=>typeof n===e));if(t)for(const e of[].concat(t))s.push((n=>n instanceof e));return 1===s.length?s[0]:s.length?e=>s.some((n=>n(e))):e},s=(e,t,s,o=n)=>n=>{const r=[`Invalid ${typeof n} ${s}: expected `];e&&(r.push(e),t&&r.push(" or ")),t&&(r.push("an instanceof "),r.push([].concat(t).map((({name:e})=>e)).join(" | "))),o(r.join(""),n)},o=(e,n="value")=>{const o=e?.typeof,r=e?.instanceof;return[t(o,r),s(o,r,n,e?.onerror)]},r=e=>n=>{const[t,s]=o(n);return class extends e{add(e){return t(e)?super.add(e):s(e)}}},p=r(Set),u=r(WeakSet),c=e=>([n,t])=>{const[s,r]=o(n,"key"),[p,u]=o(t);return class extends e{set(e,n){return s(e)||r(e),p(n)||u(n),super.set(e,n)}}},a=c(Map),f=c(WeakMap);export{a as typedMap,p as typedSet,f as typedWeakMap,u as typedWeakSet};
